{"version":3,"sources":["components/UnitDuration.js","components/Timer.js","components/Clock.js","App.js","serviceWorker.js","constants.js","store/actions.js","store/reducers.js","index.js"],"names":["UnitDuration","props","decrementDuration","bind","incrementDuration","this","changeDuration","length","name","className","id","toLocaleUpperCase","slice","onClick","React","Component","Timer","classes","start","currentTime","timeLeft","Date","toISOString","substr","phase","toUpperCase","handleStartPause","reset","preload","src","Clock","state","width","window","innerWidth","height","innerHeight","updateDimensions","breakLength","sessionLength","action","setState","addEventListener","removeEventListener","App","Boolean","location","hostname","match","INITIAL_STATE","startTimer","type","removeTimeIsRunningOutWarning","timeLeftClassList","document","getElementById","classList","contains","remove","combineReducers","rootReducer","cnst","newObj","Object","assign","newLength","newPhase","store","createStore","reducers","applyMiddleware","thunk","Container","connect","dispatch","timer","stateStart","stateTimeLeft","statePhase","clearInterval","setInterval","add","addTimeIsRunningOutWarning","play","changeBreak","changeSession","changeTimeLeft","buzzer","pause","stopBuzzer","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b9b0f4d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass UnitDuration extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.decrementDuration = this.decrementDuration.bind(this);\r\n        this.incrementDuration = this.incrementDuration.bind(this);\r\n    }\r\n\r\n    decrementDuration() {\r\n        this.props.changeDuration(this.props.length, this.props.name, 'decr');\r\n    }\r\n\r\n    incrementDuration() {\r\n        this.props.changeDuration(this.props.length, this.props.name, 'inc');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'UnitDuration'}>\r\n                <div className={'row flexBlock'}><div id={this.props.name + '-label'}>{this.props.name[0].toLocaleUpperCase() + this.props.name.slice(1) + ' Length'}</div></div>\r\n                <div className={'row flexBlock'}>\r\n                    <button id={this.props.name + '-decrement'} onClick={this.decrementDuration}><i className={'fa fa-arrow-down'} /></button>\r\n                    <div id={this.props.name + '-length'}>{this.props.length}</div>\r\n                    <button id={this.props.name + '-increment'} onClick={this.incrementDuration}><i className={'fa fa-arrow-up'}/></button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UnitDuration;","import React from 'react';\r\n\r\nclass Timer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const classes = !this.props.start ? ['fa fa-play fa-2x'] : ['fa fa-pause fa-2x'];\r\n        const currentTime = this.props.timeLeft !== 60*60 ? new Date(this.props.timeLeft * 1000).toISOString().substr(14, 5) : '60:00';\r\n        const phase = this.props.phase[0].toUpperCase() + this.props.phase.slice(1);\r\n\r\n        return (\r\n            <div id={'timer'}>\r\n                <div id={'timer-block'}>\r\n                    <div className={'flexBlock'}>\r\n                        <div id={'timer-label'}>{phase}</div>\r\n                    </div>\r\n                    <div className={'flexBlock'}>\r\n                        <div id={'time-left'}>{currentTime}</div>\r\n                    </div>\r\n                </div>\r\n                <div className={'row flexBlock'}>\r\n                    <button id={'start_stop'} onClick={this.props.handleStartPause}><i className={classes[0]}/></button>\r\n                    <button id={'reset'} onClick={this.props.reset}><i className={'fa fa-refresh fa-2x'}/></button>\r\n                </div>\r\n                <audio id={'beep'} preload={'auto'} src={'https://goo.gl/65cBl1'} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport UnitDuration from './UnitDuration';\r\nimport Timer from './Timer';\r\n\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        };\r\n\r\n        this.handleStartPause = this.handleStartPause.bind(this);\r\n        this.changeDuration = this.changeDuration.bind(this);\r\n        this.updateDimensions = this.updateDimensions.bind(this);\r\n    }\r\n\r\n    handleStartPause() {\r\n        this.props.handleStartPause(this.props.start, this.props.timeLeft, this.props.phase, this.props.breakLength, this.props.sessionLength);\r\n    }\r\n\r\n    changeDuration(length, name, action) {\r\n        this.props.changeDuration(length, name, action, this.props.phase, this.props.start);\r\n    }\r\n\r\n    updateDimensions() {\r\n        this.setState({width: window.innerWidth, height: window.innerHeight});\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.updateDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateDimensions);\r\n    }\r\n\r\n    render() {\r\n        const classes = this.state.width > 358\r\n            ? ['row', 'col justify-content-end', 'col justify-content-start']\r\n            : ['col', 'row', 'row'];\r\n\r\n        return (\r\n            <div className={'container'} id={'clock'}>\r\n                <h1>Pomodoro Clock</h1>\r\n                <div className={classes[0]}>\r\n                    <div className={classes[1] + ' flexBlock'}>\r\n                        <UnitDuration name={'break'} length={this.props.breakLength} changeDuration={this.changeDuration}/>\r\n                    </div>\r\n                    <div className={classes[2] + ' flexBlock'}>\r\n                        <UnitDuration name={'session'} length={this.props.sessionLength} changeDuration={this.changeDuration}/>\r\n                    </div>\r\n                </div>\r\n                <div className={'row'}>\r\n                    <div className={'col'}>\r\n                        <Timer\r\n                            phase={this.props.phase}\r\n                            timeLeft={this.props.timeLeft}\r\n                            start={this.props.start}\r\n                            handleStartPause={this.handleStartPause}\r\n                            reset={this.props.reset}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Clock from './components/Clock';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className={'flexBlock'} id={'App'}>\r\n          <Clock\r\n              start={this.props.start}\r\n              sessionLength={this.props.sessionLength}\r\n              breakLength={this.props.breakLength}\r\n              phase={this.props.phase}\r\n              timeLeft={this.props.timeLeft}\r\n              handleStartPause={this.props.handleStartPause}\r\n              changeDuration={this.props.changeDuration}\r\n              reset={this.props.reset}\r\n          />\r\n        </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const INITIAL_STATE = {\r\n    'rootReducer': {\r\n        'start': false,\r\n        'phase': 'session',\r\n        'sessionLength': 25,\r\n        'breakLength': 5,\r\n        'timeLeft': 1500\r\n    }\r\n};\r\n\r\nexport const START = 'START';\r\nexport const START_TIMER = 'START_TIMER';\r\nexport const PAUSE = 'PAUSE';\r\nexport const CHANGE_BREAK = 'CHANGE_BREAK';\r\nexport const CHANGE_SESSION = 'CHANGE_SESSION';\r\nexport const CHANGE_TIME_LEFT = 'CHANGE_TIME_LEFT';\r\nexport const CHANGE_PHASE = 'CHANGE_PHASE';\r\nexport const RESET = 'RESET';","import * as cnst from '../constants';\r\n\r\nconst start = () => {\r\n    return {\r\n        type: cnst.START\r\n    };\r\n};\r\n\r\nconst startTimer = (timeLeft) => {\r\n    return {\r\n        type: cnst.START_TIMER,\r\n        timeLeft\r\n    };\r\n};\r\n\r\nconst pause = () => {\r\n    return {\r\n        type: cnst.PAUSE\r\n    };\r\n};\r\n\r\nconst changeBreak = (newLength) => {\r\n    return {\r\n        type: cnst.CHANGE_BREAK,\r\n        newLength\r\n    };\r\n};\r\n\r\nconst changeSession = (newLength) => {\r\n    return {\r\n        type: cnst.CHANGE_SESSION,\r\n        newLength\r\n    };\r\n};\r\n\r\nconst changeTimeLeft = (newLength) => {\r\n    return {\r\n        type: cnst.CHANGE_TIME_LEFT,\r\n        newLength\r\n    };\r\n};\r\n\r\nconst changePhase = (newPhase, newLength) => {\r\n    return {\r\n        type: cnst.CHANGE_PHASE,\r\n        newPhase,\r\n        newLength\r\n    };\r\n};\r\n\r\nconst reset = () => {\r\n    return {\r\n        type: cnst.RESET\r\n    }\r\n};\r\n\r\nconst playBuzzer = () => {\r\n  document.getElementById('beep').play();\r\n};\r\n\r\nconst stopBuzzer = () => {\r\n    const buzzer = document.getElementById('beep');\r\n    buzzer.pause();\r\n    buzzer.currentTime = 0;\r\n};\r\n\r\nconst addTimeIsRunningOutWarning = () => {\r\n    const timeLeftClassList = document.getElementById('time-left').classList;\r\n    if (!timeLeftClassList.contains('timeIsRunningOut')) {\r\n        timeLeftClassList.add('timeIsRunningOut');\r\n        document.getElementById('timer-label').classList.add('timeIsRunningOut');\r\n    }\r\n};\r\n\r\nconst removeTimeIsRunningOutWarning = () => {\r\n    const timeLeftClassList = document.getElementById('time-left').classList;\r\n    if (timeLeftClassList.contains('timeIsRunningOut')) {\r\n        timeLeftClassList.remove('timeIsRunningOut');\r\n        document.getElementById('timer-label').classList.remove('timeIsRunningOut');\r\n    }\r\n};\r\n\r\nexport const mapStateToProps = (state) => {\r\n    return {\r\n        'start': state.rootReducer.start,\r\n        'sessionLength': state.rootReducer.sessionLength,\r\n        'breakLength': state.rootReducer.breakLength,\r\n        'timeLeft': state.rootReducer.timeLeft,\r\n        'phase': state.rootReducer.phase\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = (dispatch) => {\r\n    let timer;\r\n\r\n    return {\r\n        handleStartPause: (stateStart, stateTimeLeft, statePhase, breakLength, sessionLength) => {\r\n            if (stateStart) {\r\n                dispatch(pause());\r\n                clearInterval(timer);\r\n            } else {\r\n                dispatch(start());\r\n                timer = setInterval(() => {\r\n                    if (stateTimeLeft >= 1) {\r\n                        if (stateTimeLeft <= 61) {\r\n                            addTimeIsRunningOutWarning();\r\n                        }\r\n                        if (stateTimeLeft <= 3) {\r\n                            playBuzzer();\r\n                        }\r\n                        dispatch(startTimer(--stateTimeLeft));\r\n                    } else {\r\n                        if (statePhase === 'session') {\r\n                            statePhase = 'break';\r\n                            stateTimeLeft = breakLength * 60;\r\n                        } else if (statePhase === 'break') {\r\n                            statePhase = 'session';\r\n                            stateTimeLeft = sessionLength * 60;\r\n                        }\r\n                        dispatch(changePhase(statePhase, stateTimeLeft));\r\n                        removeTimeIsRunningOutWarning();\r\n                    }\r\n                }, 1000, dispatch, startTimer, stateTimeLeft);\r\n            }\r\n        },\r\n\r\n        changeDuration: (length, name, action, phase, start) => {\r\n            let newLength = action === 'inc' ? length + 1 : length - 1;\r\n            if (newLength <= 0 || newLength > 60) {\r\n                return;\r\n            }\r\n            if (name === 'break') {\r\n                dispatch(changeBreak(newLength));\r\n            } else if (name === 'session') {\r\n                dispatch(changeSession(newLength))\r\n            }\r\n            if (!start && name === phase) {\r\n                dispatch(changeTimeLeft(newLength * 60));\r\n            }\r\n        },\r\n\r\n        reset: () => {\r\n            dispatch(pause());\r\n            clearInterval(timer);\r\n            stopBuzzer();\r\n            dispatch(reset());\r\n            removeTimeIsRunningOutWarning();\r\n        }\r\n    };\r\n};","import {combineReducers} from \"redux\";\r\nimport * as cnst from '../constants';\r\n\r\nconst rootReducer = (state = cnst.INITIAL_STATE, action = {}) => {\r\n    const newObj = Object.assign({}, state);\r\n    switch (action.type) {\r\n        case cnst.START:\r\n            newObj.start = true;\r\n            return newObj;\r\n\r\n        case cnst.START_TIMER:\r\n            newObj.timeLeft = action.timeLeft;\r\n            return newObj;\r\n\r\n        case cnst.PAUSE:\r\n            newObj.start = false;\r\n            return newObj;\r\n\r\n        case cnst.CHANGE_BREAK:\r\n            newObj.breakLength = action.newLength;\r\n            return newObj;\r\n\r\n        case cnst.CHANGE_SESSION:\r\n            newObj.sessionLength = action.newLength;\r\n            return newObj;\r\n\r\n        case cnst.CHANGE_TIME_LEFT:\r\n            newObj.timeLeft = action.newLength;\r\n            return newObj;\r\n\r\n        case cnst.CHANGE_PHASE:\r\n            newObj.phase = action.newPhase;\r\n            newObj.timeLeft = action.newLength;\r\n            return newObj;\r\n\r\n        case cnst.RESET:\r\n            return Object.assign({}, cnst.INITIAL_STATE.rootReducer);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default combineReducers({rootReducer});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {mapStateToProps, mapDispatchToProps} from \"./store/actions\";\nimport {INITIAL_STATE} from \"./constants\";\nimport {createStore, applyMiddleware} from \"redux\";\nimport {Provider, connect} from 'react-redux';\nimport reducers from './store/reducers';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(reducers, INITIAL_STATE, applyMiddleware(thunk));\nconst Container = connect(mapStateToProps, mapDispatchToProps)(App);\n\nReactDOM.render(\n    <Provider store={store}>\n        <Container/>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}